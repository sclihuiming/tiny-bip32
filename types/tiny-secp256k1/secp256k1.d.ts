/// <reference types="node" />
declare const BN: any;
declare const EC: any;
declare const secp256k1: any;
declare const deterministicGenerate: any;
declare const ZERO32: Buffer;
declare const EC_GROUP_ORDER: Buffer;
declare const EC_P: Buffer;
declare const n: any;
declare const nDiv2: any;
declare const G: any;
declare const THROW_BAD_PRIVATE = "Expected Private";
declare const THROW_BAD_POINT = "Expected Point";
declare const THROW_BAD_TWEAK = "Expected Tweak";
declare const THROW_BAD_HASH = "Expected Hash";
declare const THROW_BAD_SIGNATURE = "Expected Signature";
declare const THROW_BAD_EXTRA_DATA = "Expected Extra Data (32 bytes)";
declare function isScalar(x: any): boolean;
declare function isOrderScalar(x: any): boolean;
declare function isPoint(p: any): boolean;
declare function __isPointCompressed(p: any): boolean;
declare function isPointCompressed(p: any): boolean;
declare function isPrivate(x: any): boolean;
declare function isSignature(value: any): boolean;
declare function assumeCompression(value: any, pubkey: any): any;
declare function fromBuffer(d: any): any;
declare function toBuffer(d: any): any;
declare function decodeFrom(P: any): any;
declare function getEncoded(P: any, compressed: any): Buffer;
declare function pointAdd(pA: any, pB: any, __compressed: any): Buffer;
declare function pointAddScalar(p: any, tweak: any, __compressed: any): Buffer;
declare function pointCompress(p: any, __compressed: any): Buffer;
declare function pointFromScalar(d: any, __compressed: any): Buffer;
declare function pointMultiply(p: any, tweak: any, __compressed: any): Buffer;
declare function privateAdd(d: any, tweak: any): any;
declare function privateSub(d: any, tweak: any): any;
declare function sign(hash: any, x: any): any;
declare function signWithEntropy(hash: any, x: any, addData: any): Buffer;
declare function __sign(hash: any, x: any, addData: any): Buffer;
declare function verify(hash: any, q: any, signature: any, strict: any): any;
